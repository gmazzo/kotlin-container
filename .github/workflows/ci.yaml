name: ci

on:
  workflow_dispatch:
  push:

env:
  REGISTRY_IMAGE: gmazzo/kotlin

jobs:
  fetch-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.fetch.outputs.versions }}
    steps:
      - id: fetch
        name: Fetch Kotlin versions
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSIONS=$(gh --repo JetBrains/kotlin release list --exclude-drafts --exclude-pre-releases --json tagName --jq '[.[].tagName]')
          
          echo "versions=$VERSIONS" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs:
      - fetch-versions
    strategy:
      fail-fast: false
      matrix:
        bases:
          - eclipse-temurin:8
          - eclipse-temurin:8-alpine
          - eclipse-temurin:11
          - eclipse-temurin:11-alpine
          - eclipse-temurin:17
          - eclipse-temurin:17-alpine
          - eclipse-temurin:21
          - eclipse-temurin:21-alpine
        platform:
          - linux/i386
          - linux/amd64
          - linux/arm/v5
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
        versions: ${{ fromJSON(needs.fetch-versions.outputs.versions) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
